name: Release Build and Deploy

on:
  push:
    tags:
      - "v*.*.*" # 匹配版本标签如 v1.0.0
  workflow_dispatch: # 允许手动触发
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
        default: "v1.0.0"
      prerelease:
        description: "Mark as pre-release"
        required: false
        default: false
        type: boolean

env:
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

jobs:
  # 多平台编译构建
  build-matrix:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows构建
          - name: "windows-x64"
            display_name: "Windows x64"
            os: windows-latest
            arch: x64
            platform: x64
            vcpkg_triplet: x64-windows
            cmake_generator: "Visual Studio 17 2022"
            executable_name: "YumeCard_x64.exe"
            package_format: "zip"

          - name: "windows-x86"
            display_name: "Windows x86"
            os: windows-latest
            arch: x86
            platform: Win32
            vcpkg_triplet: x86-windows
            cmake_generator: "Visual Studio 17 2022"
            executable_name: "YumeCard_x86.exe"
            package_format: "zip"

          - name: "windows-arm64"
            display_name: "Windows ARM64"
            os: windows-latest
            arch: arm64
            platform: ARM64
            vcpkg_triplet: arm64-windows
            cmake_generator: "Visual Studio 17 2022"
            executable_name: "YumeCard_arm64.exe"
            package_format: "zip"

          # Linux构建
          - name: "linux-x64"
            display_name: "Linux x64"
            os: ubuntu-latest
            arch: x64
            platform: x64
            vcpkg_triplet: x64-linux
            cmake_generator: "Unix Makefiles"
            executable_name: "YumeCard_x64"
            package_format: "tar.gz"

          - name: "linux-arm64"
            display_name: "Linux ARM64"
            os: ubuntu-latest
            arch: arm64
            platform: arm64
            vcpkg_triplet: arm64-linux
            cmake_generator: "Unix Makefiles"
            executable_name: "YumeCard_arm64"
            package_format: "tar.gz"
            cross_compile: true

    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.display_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Clean vcpkg directory # 新增步骤
        shell: bash
        run: |
          if [ -d "${{ github.workspace }}/vcpkg" ]; then
            echo "Removing existing vcpkg directory..."
            rm -rf "${{ github.workspace }}/vcpkg"
          fi

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11.5
        with:
          # 使用一个更新且有效的 vcpkg 提交哈希 (2024年12月)
          vcpkgGitCommitId: "1de2026f28ead93ff1773e6e680387643e914ea1"
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'

      - name: Get version from tag or input
        id: get_version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_no_v=${VERSION#v}" >> $GITHUB_OUTPUT

      # Linux交叉编译工具安装
      - name: Install Linux cross-compilation tools
        if: matrix.cross_compile && matrix.arch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      # 安装项目依赖
      - name: Install dependencies
        shell: bash
        run: |
          if [ "${{ matrix.cross_compile }}" = "true" ] && [ "${{ matrix.arch }}" = "arm64" ]; then
            export CC=aarch64-linux-gnu-gcc
            export CXX=aarch64-linux-gnu-g++
          fi

          # 从 vcpkg.json 安装依赖
          # --triplet 参数仍然需要，以确保为正确的架构安装依赖
          # 此命令将读取更新后的 vcpkg.json 文件
          vcpkg install --triplet ${{ matrix.vcpkg_triplet }}

      # Windows CMake配置
      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cmake -B build `
            -A ${{ matrix.platform }} `
            -G "${{ matrix.cmake_generator }}" `
            -DCMAKE_BUILD_TYPE=Release `
            -DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg_triplet }} `
            -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" `
            -DYUMECARD_VERSION="${{ steps.get_version.outputs.version_no_v }}"

      # Linux/macOS CMake配置
      - name: Configure CMake (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          CMAKE_ARGS=(
            -B build
            -G "${{ matrix.cmake_generator }}"
            -DCMAKE_BUILD_TYPE=Release
            -DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg_triplet }}
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
            -DYUMECARD_VERSION="${{ steps.get_version.outputs.version_no_v }}"
          )

          # Linux交叉编译设置
          if [ "${{ matrix.cross_compile }}" = "true" ] && [ "${{ matrix.arch }}" = "arm64" ]; then
            CMAKE_ARGS+=(
              -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc
              -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++
              -DCMAKE_SYSTEM_NAME=Linux
              -DCMAKE_SYSTEM_PROCESSOR=aarch64
            )
          fi

          cmake "${CMAKE_ARGS[@]}"

      # 编译构建
      - name: Build project
        run: |
          cmake --build build --config Release --parallel
        shell: bash

      # 运行基本测试
      - name: Run tests
        shell: bash
        run: |
          cd build/bin
          if [ -f "${{ matrix.executable_name }}" ]; then
            echo "Testing executable: ${{ matrix.executable_name }}"
            ./${{ matrix.executable_name }} --version || echo "Version check completed"
            ./${{ matrix.executable_name }} --help || echo "Help command completed"
            echo "Basic tests passed"
          else
            echo "Executable not found: ${{ matrix.executable_name }}"
            ls -la
            exit 1
          fi

      # 创建发布包
      - name: Create release package
        shell: bash
        run: |
          cd build

          # 创建发布目录
          PACKAGE_NAME="YumeCard-${{ steps.get_version.outputs.version }}-${{ matrix.name }}"
          mkdir -p release/$PACKAGE_NAME

          # 复制可执行文件
          cp bin/${{ matrix.executable_name }} release/$PACKAGE_NAME/

          # 复制资源文件
          if [ -d "../out" ]; then
            cp -r ../out/* release/$PACKAGE_NAME/ 2>/dev/null || true
          fi

          # 复制文档
          cp ../README.md release/$PACKAGE_NAME/ 2>/dev/null || true
          cp ../BUILD.md release/$PACKAGE_NAME/ 2>/dev/null || true
          cp ../MULTI_ARCH_README.md release/$PACKAGE_NAME/ 2>/dev/null || true

          # 创建安装脚本
          if [ "${{ runner.os }}" != "Windows" ]; then
            cat > release/$PACKAGE_NAME/install.sh << EOF
          #!/bin/bash
          echo "Installing YumeCard..."
          sudo mkdir -p /usr/local/bin
          sudo cp ${{ matrix.executable_name }} /usr/local/bin/yumecard
          sudo chmod +x /usr/local/bin/yumecard
          echo "YumeCard installed to /usr/local/bin/yumecard"
          echo "Run 'yumecard --help' to get started"
          EOF
            chmod +x release/$PACKAGE_NAME/install.sh
          else
            cat > release/$PACKAGE_NAME/install.bat << EOF
          @echo off
          echo Installing YumeCard...
          if not exist "%ProgramFiles%\\YumeCard" mkdir "%ProgramFiles%\\YumeCard"
          copy "${{ matrix.executable_name }}" "%ProgramFiles%\\YumeCard\\"
          echo YumeCard installed to %ProgramFiles%\\YumeCard
          echo Add %ProgramFiles%\\YumeCard to your PATH to use 'yumecard' command
          pause
          EOF
          fi

          # 创建包
          cd release
          if [ "${{ matrix.package_format }}" = "zip" ]; then
            zip -r ${PACKAGE_NAME}.zip $PACKAGE_NAME
          else
            tar -czf ${PACKAGE_NAME}.tar.gz $PACKAGE_NAME
          fi

          # 生成校验和
          if command -v sha256sum >/dev/null; then
            sha256sum ${PACKAGE_NAME}.* > ${PACKAGE_NAME}.sha256
          elif command -v shasum >/dev/null; then
            shasum -a 256 ${PACKAGE_NAME}.* > ${PACKAGE_NAME}.sha256
          fi

      # 上传构建产物
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-build
          path: build/release/*

  # 创建GitHub Release
  create-release:
    needs: build-matrix
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag or input
        id: get_version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_no_v=${VERSION#v}" >> $GITHUB_OUTPUT

      # 下载所有构建产物
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      # 生成发布说明
      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## YumeCard ${{ steps.get_version.outputs.version }}
          ### 新版本特性
          - 多平台支持：Windows (x64, x86, ARM64), Linux (x64, ARM64)
          - 优化的构建系统和性能改进s (x64, x86, ARM64), Linux (x64, ARM64)
          - 完整的CI/CD自动化流程
          - 完整的CI/CD自动化流程
          ### 下载说明
          选择适合您系统的版本：
          选择适合您系统的版本：
          #### Windows
          - **YumeCard-${{ steps.get_version.outputs.version }}-windows-x64.zip** - Windows 64位 (推荐)
          - **YumeCard-${{ steps.get_version.outputs.version }}-windows-x86.zip** - Windows 32位 (推荐)
          - **YumeCard-${{ steps.get_version.outputs.version }}-windows-arm64.zip** - Windows ARM64
          - **YumeCard-${{ steps.get_version.outputs.version }}-windows-arm64.zip** - Windows ARM64
          #### Linux
          - **YumeCard-${{ steps.get_version.outputs.version }}-linux-x64.tar.gz** - Linux 64位 (推荐)
          - **YumeCard-${{ steps.get_version.outputs.version }}-linux-arm64.tar.gz** - Linux ARM64)
          - **YumeCard-${{ steps.get_version.outputs.version }}-linux-arm64.tar.gz** - Linux ARM64
          ### 安装说明
          1. 下载适合您系统的压缩包
          2. 解压到您选择的目录缩包
          3. 运行包含的安装脚本（可选）
          4. 使用 `yumecard --help` 查看使用说明
          4. 使用 `yumecard --help` 查看使用说明
          ### 校验和 (SHA256)
          每个下载包都包含相应的 `.sha256` 文件用于校验文件完整性。
          每个下载包都包含相应的 `.sha256` 文件用于校验文件完整性。
          ### 系统要求
          - Windows: Windows 10/11 或更高版本
          - Linux: 现代Linux发行版 (Ubuntu 18.04+, CentOS 7+, 等)
          - Linux: 现代Linux发行版 (Ubuntu 18.04+, CentOS 7+, 等)
          EOF
          EOF
      # 创建Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with: softprops/action-gh-release@v1
          tag_name: ${{ steps.get_version.outputs.version }}
          name: YumeCard ${{ steps.get_version.outputs.version }}
          body_path: release_notes.mdt_version.outputs.version }}
          draft: falseelease_notes.md
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          files: |se: ${{ github.event.inputs.prerelease == 'true' }}
            release-artifacts/**/*.zip
            release-artifacts/**/*.tar.gz
            release-artifacts/**/*.sha256
        env:release-artifacts/**/*.sha256
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # 输出发布信息
      - name: Release Summary
        run: |Release Summary
          echo "🎉 YumeCard ${{ steps.get_version.outputs.version }} 发布成功!"
          echo "" YumeCard ${{ steps.get_version.outputs.version }} 发布成功!"
          echo "📦 构建的平台:"
          echo "  - Windows: x64, x86, ARM64"
          echo "  - Linux: x64, ARM64" ARM64"
          echo "" - Linux: x64, ARM64"
          echo "🔗 发布链接: https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_version.outputs.version }}"
          echo "🔗 发布链接: https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_version.outputs.version }}"
